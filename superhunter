#!/usr/bin/python3
import os
import time
import sys
import subprocess
import tempfile
import shutil
r = "\033[0;49;91m"                                                  
g = "\033[0;49;92m"
y = "\033[0;49;93m"
b = "\033[0;49;94m"                                                  
p = "\033[0;49;95m"
b2 = "\033[0;49;96m"
d = "\033[2;37m"
w = "\033[0m"

class Cores:
    def cc1(msg):
        aviso = print(f"[{y}!{w}] {y}WARNING : {w}{msg}")
    def cc2(msg):
        erro_crítico = print(f"[{p}!!{w}]{r} FATAL ERROR : {y}{msg}{w}")
    def cc3(msg):
        info = print(f"[{y}i{w}] INFO : {w}{msg}{w}")
    def cc4(msg):    
        sucesso = print(f"[{g}:){w}]{g} SUCESS : {w}{msg}")

def execcmd(comando):
    
    try:
        # Executa o comando e captura a saída
        #Cores.cc3(f"EXECUTING {comando[0]} {comando[1]} {comando[2]} {comando[3]}")
        time.sleep(2)
        resultado = subprocess.run(comando, shell=True, capture_output=True, text=True, check=True)
        tam = len(resultado.stdout.splitlines())
        if tam >= 4 and "log" in comando:
            lista = resultado.stdout.splitlines()
            for item in lista:
                def execmy(command):
                    executar = subprocess.run(command, shell=True, capture_output=True, text=True, check=True)
                    print(executar.stdout)
                execmy(f"echo '' >> {item}")
                Cores.cc4(f"{item} Succefully Cleaned!")
                time.sleep(1)
        elif "log" in comando or "history" in comando:
            lista = resultado.stdout.splitlines()
            for item in lista:
                def execmy(command):
                    executar = subprocess.run(command, shell=True, capture_output=True, text=True, check=True)
                    print(executar.stdout)
                execmy(f"echo '' >> {item}")
                Cores.cc4(f"{item} Succefully Cleaned!")
                time.sleep(1)
        else:
            pass
                

    except subprocess.CalledProcessError as e:
        Cores.cc3(comando)
        Cores.cc2(e.stderr)
#cmdexec = ["cwlist.txt", "0xc0da-ptbr.txt", "10-million-password-list-top-10000000.txt", "7776palavras.txt", "best1050.txt", "first-name-pt-br.txt", "numeros.txt", "wifite", "wlist.txt", "biblic-words-pt-br.txt", "br-wordlist", "brazilian-soccer-teams.txt", "brwlist.txt", "passphrases.txt", "senhas.txt"]
def rootcheck():
    return os.getuid() == 0

#!/usr/bin/python3
def ler_etc_passwd():
    try:
        with open('/etc/passwd', 'r') as f:
            lines = f.readlines()
        return lines
    except FileNotFoundError:
        print("O arquivo /etc/passwd não foi encontrado.")
        return []
    except PermissionError:
        print("Permissão negada para ler /etc/passwd.")
        return []

def analisar_usuarios_e_remover_intrusos(lines):
    root_users = []
    outros = []
    
    for linha in lines:
        partes = linha.strip().split(':')
        # Verifica se a linha tem exatamente 7 partes
        if len(partes) != 7:
            continue
        
        usuario, senha, uid, gid, descricao, home, shell = partes
        
        if uid == '0':
            if usuario == 'root':
                root_users.append(linha.strip())
            else:
                outros.append(linha.strip())
    
    return root_users, outros

def remover_intrusos(outros):
    # Cria um arquivo temporário para armazenar as lines válidas
    with tempfile.NamedTemporaryFile('w', delete=False) as temp_file:
        temp_file_name = temp_file.name
        
        # Escreve as lines de /etc/passwd, exceto as lines com intrusos
        lines = ler_etc_passwd()
        for linha in lines:
            partes = linha.strip().split(':')
            if len(partes) != 7:
                temp_file.write(linha)
                continue
            
            usuario, senha, uid, gid, descricao, home, shell = partes
            
            if not (uid == '0' and usuario != 'root'):
                temp_file.write(linha)
    
    # Substitui o arquivo original pelo arquivo temporário
    shutil.move(temp_file_name, '/etc/passwd')
    Cores.cc1("INTRUDER REMOVED SUCCEFULLY! ")

def main():
    lines = ler_etc_passwd()
    root_users, outros = analisar_usuarios_e_remover_intrusos(lines)
    for outro in outros:
        Cores.cc2(f"INTRUDER FOUNDED : {outro}")
    if outros:
        Cores.cc3("REMOVING THIS TRASHBAG(s)...")
        remover_intrusos(outros)
    else:
        Cores.cc3("No one intruder founded!")
        


if rootcheck():
    import os

    def verifica_arquivo(diretorio, nome_arquivo):
        caminho_arquivo = os.path.join(diretorio, nome_arquivo)
        if os.path.isfile(caminho_arquivo):
            Cores.cc4(f"RKHUNTER FOUNDED!")
            return True
        else:
            Cores.cc1(f"RKHUNTER NOT FOUNDED, INITIALIZING INSTALLATION...")
            execcmd("apt install rkhunter")
            return False
    diretorio = "/bin"
    nome_arquivo = "rkhunter"
    verifica_arquivo(diretorio, nome_arquivo)
    print("")
    for i in range(5,0,-1):
        Cores.cc3(f"Scanning the entire SSD from rootkits, or possible remote acesses...{i}")
        time.sleep(1)

    print("")
    os.system("rkhunter --check --skip-keypress")
    print("")

    Cores.cc3("VERIFING IF syslogs and kern.logs EXISTS...")
    
    execcmd('locate /var/log/syslog && locate /var/log/kern')
    
    print("")

    Cores.cc3("VERIFING history.logs...")
    
    execcmd('locate history.log')
    
    print("")

    execcmd('locate .zsh_history')

    print("")

    Cores.cc3(f"SERCHING IF HAVE MORE USERS WITH {r}ROOT{w} PERMISSION...")
    
    print("")

    main()

    print("")

    

else:
    print(f"you need {r}root{w} permission")